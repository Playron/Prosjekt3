{"version":3,"sources":["images/card.png","components/PopUp.tsx","components/Card.tsx","components/SearchResult.tsx","components/SearchScreen.tsx","components/ThemeProvider.tsx","components/ThemeSwapper.tsx","components/TitleCard.tsx","components/App.tsx","index.tsx"],"names":["module","exports","PopUp","showCard","card_info","onClose","useState","comment","setComment","comments","setComments","retrieveComments","fetch","movieName","then","response","json","comments_json","reverse","Modal","show","size","centered","Header","closeButton","onClick","Title","id","className","Body","src","require","alt","style","display","margin","movieDescription","type","name","onChange","e","target","value","commentCred","username","sessionStorage","getItem","console","log","axios","post","map","i","Footer","movieRating","Button","Card","movie","cardIndex","setShowCard","cardInfo","setCardInfo","movieYear","SearchResult","movies","min_year","Math","min","apply","o","max_year","max","desc_year","setDescYear","desc_rating","setDescRating","pageNumber","setPageNumber","previousButtonHidden","setPreviousButtonHidden","nextButtonHidden","setNextButtonHidden","filtersHidden","setFiltersHidden","searchResult","setsearchResult","filteryear","setFilterYear","rating","setRating","useEffect","filterResult","newResult","oldResult","returnResult","index","length","element","push","filterOnRating","output","startIndex","endIndex","filterOnNumberOfElements","filterOnYear","previousPage","nextPage","hidden","toString","parseInt","step","parseFloat","sorted","sort","a","b","SearchScreen","query","setQuery","searchresult","setSearchResult","retrieveFromDB","movies_json","placeholder","onKeyPress","key","array","floor","random","ThemeContext","React","createContext","ThemeProvider","children","theme","setTheme","lightmodeValues","darkmodeValues","backgroundColor","color","document","body","Provider","toggleTheme","ThemeSwapper","useContext","textColor","setTextColor","background","border","float","TitleCard","headercolor","setHeadercolor","headerstyle","App","title","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ff461627.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card.f40034fe.png\";","import React, { useState } from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Modal } from 'react-bootstrap';\r\nimport axios from 'axios'\r\nimport './../styles/modal.css'\r\nimport './../styles/comment.css'\r\n\r\nexport default function PopUp({showCard, card_info, onClose}) {\r\n    interface comment_interface{\r\n        username: String,\r\n        movieName: String,\r\n        comment: String\r\n    }\r\n\r\n    const [comment, setComment] = useState(\"\" as String);\r\n    const [comments, setComments] = useState([] as comment_interface[]);\r\n    /* If user presses add-comment button, then a new comment record is added to db with foreign keys(username and movieName) and the comment*/\r\n    const postComment = () : void => {\r\n        const commentCred = {username: sessionStorage.getItem('username'), movieName: card_info.movieName, comment: comment};\r\n        console.log(commentCred)\r\n        axios.post('http://it2810-56.idi.ntnu.no:3000/comments/add', commentCred)\r\n        .then(()=> retrieveComments())\r\n    }\r\n    /* Used to always keep track of the text written in comment field, updates when text is changed */\r\n    const handleChange = (e : any) : void => {\r\n        setComment(e.target.value)\r\n    }\r\n    /* Does a call to comments schema in DB, adds comments to comments variable showing the newest comments first  */\r\n    const retrieveComments = () : void => {\r\n        fetch('http://it2810-56.idi.ntnu.no:3000/comments/' + card_info.movieName)\r\n        .then((response) => response.json())\r\n        .then((comments_json) =>{\r\n            setComments(comments_json.reverse())\r\n    })};\r\n\r\n    return (\r\n        <div>\r\n        <Modal show={showCard} size=\"lg\" centered  >\r\n            <Modal.Header closeButton onClick={() => onClose()}>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    <div className=\"movieName\">\r\n                        {card_info.movieName}\r\n                    </div>\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <img id=\"modal-img\" src={require('./../images/card.png')} alt=\"Avatar\" style={{display: \"table\", margin: \"0 auto\"}}/>\r\n                <p id=\"desc\">\r\n                {card_info.movieDescription}\r\n                </p>\r\n                <br></br>\r\n                <div className=\"commentBox\">\r\n                    <input type=\"text\" name=\"comment\" id=\"comment\" onChange={handleChange}/>\r\n                    <input type=\"submit\" value=\"Add comment\" onClick={postComment}/>\r\n                    <input type=\"submit\" value=\"Get comments\" onClick={retrieveComments}/>\r\n                </div>\r\n                {comments.map((comment,i) => (\r\n                    <div className=\"comment-section\">\r\n                        <>\r\n                        <h5>{comment.username}</h5>\r\n                        <p>Comment: {comment.comment}</p>\r\n                        </>\r\n                    </div>\r\n                    ))}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <div id=\"rating\">Movie rating: {card_info.movieRating}</div>\r\n                <Button onClick={() => onClose()}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport PopUp from './PopUp';\r\n\r\nexport default function Card({movie, cardIndex}){\r\n    interface movieInterface {\r\n        _id : String,\r\n        movieName: String,\r\n        movieYear: Number,\r\n        movieDescription: String,\r\n        movieRating : Number\r\n        moviePoster: String\r\n    }\r\n    const [showCard, setShowCard] = useState(false);\r\n    const [cardInfo, setCardInfo] = useState(null as movieInterface);\r\n    const cardClicked = (i : number) : void =>{\r\n        setCardInfo(movie);\r\n        setShowCard(true);\r\n    } \r\n    return (\r\n        <>\r\n            <div className=\"card\" onClick={() => cardClicked(cardIndex)}>\r\n                <div className = \"card-image\">\r\n                    <img src={require('./../images/card.png')} alt={require('./../images/card.png')}/>\r\n                </div>\r\n                <h3>{movie.movieName} ({movie.movieYear})</h3>\r\n                <h4>IMDb-rating: {movie.movieRating}</h4>\r\n            </div>\r\n            {/* Decides if popup should be rendered or not */}\r\n            {showCard ? (<PopUp showCard={showCard} card_info={cardInfo} onClose={() => setShowCard(false)}/>) : null }\r\n        </>\r\n    )\r\n}","import React,{useState,useEffect} from 'react'\r\nimport './../styles/searchResult.css'\r\nimport Card from './Card';\r\ninterface movieInterface {\r\n    _id : String,\r\n    movieName: String,\r\n    movieYear: Number,\r\n    movieDescription: String,\r\n    movieRating : Number\r\n}\r\ninterface resultProps {\r\n    movies : movieInterface[]\r\n}\r\nconst SearchResult: React.FC<resultProps> = ({movies} : resultProps) => {\r\n    // When user does a query, change max, min year for slider\r\n    let min_year: number = Math.min.apply(Math, movies.map(function(o) { return o.movieYear; }));\r\n    let max_year: number = Math.max.apply(Math, movies.map(function(o) { return o.movieYear; }));\r\n    const numberOfElementsPerPage : number = 12;\r\n    /* Decides if user sorts on desc or asc order */\r\n    const [desc_year, setDescYear] = useState(false);\r\n    const [desc_rating, setDescRating] = useState(false);\r\n    /* Used for page control*/\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const [previousButtonHidden, setPreviousButtonHidden] = useState(true);\r\n    const [nextButtonHidden, setNextButtonHidden] = useState(true);\r\n    /* Only shows after first search */\r\n    const [filtersHidden, setFiltersHidden] = useState(true);\r\n\r\n    const [searchResult, setsearchResult] = useState([] as movieInterface[]);\r\n    const [filteryear,setFilterYear] = useState( min_year as Number);\r\n    const [rating, setRating] = useState(0.0 as Number);\r\n\r\n    /* Render component when query from SearchScreen has returned */\r\n    useEffect(() => { \r\n        setsearchResult(movies);\r\n        setPageNumber(0);\r\n        filterResult();\r\n    }, [movies])\r\n\r\n    useEffect(() => {\r\n        filterResult()\r\n    }, [pageNumber, numberOfElementsPerPage])\r\n\r\n    /* Keeps only the movies that are released later than the chosen year*/\r\n    const filterOnYear = (oldResult : movieInterface[]) : movieInterface[] =>{ \r\n        let returnResult : movieInterface[] = [];\r\n            for (let index = 0; index < oldResult.length; index++) {\r\n                const element = oldResult[index];\r\n                if(element.movieYear >= filteryear){\r\n                    returnResult.push(element)\r\n                }  \r\n            }\r\n            return returnResult;\r\n    }\r\n    /* Keeps only the movies that has rating higher than the chosen rating treshold*/\r\n    const filterOnRating = (oldResult : movieInterface[]) : movieInterface[] =>{\r\n        let returnResult : movieInterface[] = []; \r\n            for (let index = 0; index < oldResult.length; index++) {\r\n                const element = oldResult[index];\r\n                if(element.movieRating >= rating){\r\n                    returnResult.push(element)\r\n                }  \r\n            }\r\n            return returnResult;\r\n    }\r\n\r\n    const filterOnNumberOfElements = (oldResult : movieInterface[]) : movieInterface[] => {\r\n        let output : movieInterface[] = [];\r\n        setPreviousButtonHidden(pageNumber === 0);\r\n        setNextButtonHidden(oldResult.length <= (pageNumber + 1) * numberOfElementsPerPage);\r\n        let startIndex = pageNumber * numberOfElementsPerPage;\r\n        let endIndex = Math.min(startIndex + numberOfElementsPerPage, oldResult.length);\r\n        for (let index = startIndex; index < endIndex; index++) {\r\n            output.push(oldResult[index])\r\n        }\r\n        return output;\r\n    }\r\n    /* Combines all filter functions to only show the movies meeting the requirements and filtered on number of movie records per page */\r\n    const filterResult = () : void =>{\r\n        let oldResult = movies;\r\n        let newResult: movieInterface[] = filterOnRating(oldResult);\r\n        newResult = filterOnYear(newResult);\r\n        newResult = filterOnNumberOfElements(newResult);\r\n        setsearchResult(newResult);\r\n    }\r\n    /* Usaed to change page, showing different movie records */\r\n    const previousPage = () : void => {\r\n        setPageNumber(pageNumber => pageNumber - 1); // Compatible with async\r\n    }\r\n    const nextPage = () : void => {\r\n        setPageNumber(pageNumber => pageNumber + 1); // Compatible with async\r\n    }\r\n    /* Toggles if the filter button should be shown, based on if a query is done or not */\r\n    const hideShowFilters = () : void => {\r\n        setFiltersHidden(filtersHidden => !filtersHidden);\r\n    }\r\n    /* These two function is called when user clicks sort buttons. If clicked multiple times, they toggle ascending of descending order of sorting  */\r\n    const sortOnYear = () =>{\r\n        const sorted : movieInterface[] = movies.sort((a, b) => (a.movieYear < b.movieYear) ? 1 : -1)\r\n        if(desc_year){\r\n            sorted.reverse()\r\n        }\r\n        setsearchResult(sorted);\r\n        filterResult();\r\n        setDescYear((desc_year)=> !desc_year)\r\n    }\r\n    const sortOnRating = () =>{\r\n        const sorted : movieInterface[] = movies.sort((a, b) => (a.movieRating < b.movieRating) ? 1 : -1)\r\n        if(desc_rating){\r\n            sorted.reverse()\r\n        }\r\n        setsearchResult(sorted);\r\n        filterResult();\r\n        setDescRating((desc_rating)=> !desc_rating);\r\n        console.log(desc_rating);\r\n    }\r\n\r\n    return (\r\n        <div className=\"movie\">\r\n            <div className=\"hideshowfilters\">\r\n                <button className=\"filterbutton resultbutton\" onClick={hideShowFilters}>{filtersHidden ? \"Show filters\" : \"Hide filters\"}</button>\r\n            </div>\r\n            <div className=\"filterbox\" hidden={filtersHidden}>\r\n                {/* Filter on year */}\r\n                <div className=\"filtername\">\r\n                    CurrentYear: {filteryear}\r\n                </div>\r\n                <div className=\"leftvalue\">{min_year}</div>\r\n                <input className=\"filterslider\" type=\"range\" min={min_year.toString()} max={max_year.toString()} value={filteryear.toString()} onChange={(e)=>setFilterYear(parseInt(e.target.value))} />\r\n                <div className=\"rightvalue\">{max_year}</div>\r\n                <br/>\r\n                {/* Filter on rating */}\r\n                <div className=\"filtername\">\r\n                    Rating: {rating}\r\n                </div>\r\n                <div className=\"leftvalue\">{0}</div>\r\n                <input className=\"filterslider\" type=\"range\" min='0.0' max='10.0' step='0.1' value={rating.toString()} onChange={(e) => setRating(parseFloat(e.target.value))} />\r\n                <div className=\"rightvalue\">{10}</div>\r\n                <br/>\r\n                <button className=\"filterbutton resultbutton\" onClick={filterResult}>Apply filters</button>\r\n                {/* Sort buttons */}\r\n                <button className=\"filterbutton resultbutton\" onClick={sortOnYear}>Sort on year</button>\r\n                <button className=\"filterbutton resultbutton\" onClick={sortOnRating}>Sort on rating</button>\r\n            </div>\r\n\r\n            {/* Page bottons on top */}\r\n            <div className=\"pagebuttons\">\r\n                <button className=\"prevpagebutton resultbutton\" onClick={previousPage} hidden={previousButtonHidden}>&lt;</button>\r\n                <button className=\"nextpagebutton resultbutton\" onClick={nextPage} hidden={nextButtonHidden}>&gt;</button>\r\n            </div>\r\n\r\n            {/* Cards */}\r\n            <div className = \"container\">\r\n                {searchResult.map((movie,i) => (\r\n                    <Card movie={movie} cardIndex={i}/>\r\n                ))}\r\n            </div>\r\n\r\n            {/* Page bottons on top */}\r\n            <div className=\"pagebuttons bottombuttons\">\r\n                <button className=\"prevpagebutton resultbutton\" onClick={previousPage} hidden={previousButtonHidden}>&lt;</button>\r\n                <button className=\"nextpagebutton resultbutton\" onClick={nextPage} hidden={nextButtonHidden}>&gt;</button>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default SearchResult;","import React, { useState} from 'react'\r\nimport SearchResult from './SearchResult';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './../styles/search.css'\r\n\r\ninterface movieInterface {\r\n    _id : String,\r\n    movieName: String,\r\n    movieYear: Number,\r\n    movieDescription: String,\r\n    movieRating: Number\r\n}\r\nexport default function SearchScreen() {\r\n    /* Query and search result */\r\n    const [query, setQuery] = useState('');\r\n    const [searchresult, setSearchResult] = useState(null as movieInterface[])\r\n\r\n    /* Updates query string when user writes in field */\r\n    const handleChange = (e : any) : void => { \r\n        setQuery(e.target.value);\r\n    }\r\n\r\n    /* DB Search */\r\n    const retrieveFromDB = () : void =>{\r\n        fetch('http://it2810-56.idi.ntnu.no:3000/movies/movietitle/' + query)\r\n        .then((response) => response.json())\r\n        .then((movies_json) =>{\r\n            setSearchResult(movies_json);\r\n        }) \r\n    }\r\n    /* Feeling lucky functionality, retrieves a random movie record */\r\n    const getRandomElement = (array: any[]): any => array[Math.floor(Math.random() * array.length)];\r\n    const feelingLucky = () : void =>{\r\n        fetch('http://it2810-56.idi.ntnu.no:3000/movies/movietitle/' + query)\r\n        .then((response) => response.json())\r\n        .then((movies_json) => {\r\n            setSearchResult(movies_json);\r\n        })\r\n        .then(() => setSearchResult((searchresult)=>[getRandomElement(searchresult)]))\r\n    } \r\n    return (\r\n        <div>\r\n            <div className=\"searchBar\">\r\n                <input id=\"bar\" type=\"text\" placeholder=\"Input MovieTitle\" onChange={handleChange} onKeyPress={(e)=>{if(e.key==='Enter'){retrieveFromDB()}}}/>\r\n                <input className=\"btn\" type=\"button\" value='Search'  onClick={retrieveFromDB}/>\r\n                <input className=\"btn\" type=\"button\" value='Im feeling lucky'  onClick={feelingLucky}/>\r\n            </div>\r\n            {searchresult ? (<SearchResult movies={searchresult}/>) : null }\r\n        </div>\r\n    )\r\n}","import React, { useState } from \"react\";\r\ntype Theme = \"lightmode\" | \"darkmode\";\r\ntype ThemeContext = { theme: Theme; toggleTheme: () => void };\r\n\r\nexport const ThemeContext = React.createContext<ThemeContext>(\r\n    {} as ThemeContext\r\n);\r\n\r\nexport const ThemeProvider: React.FC = ({ children }) => {\r\n    const [theme, setTheme] = useState<Theme>(\"darkmode\");\r\n    const toggleTheme = () => {\r\n        setTheme(theme === \"lightmode\" ? \"darkmode\" : \"lightmode\");\r\n    };\r\n\r\n    const lightmodeValues = [\r\n        \"#e7e7e7\", /* backgroundColor */\r\n        \"#171717\", /* color */\r\n\r\n    ];\r\n\r\n    const darkmodeValues = [\r\n        \"#272727\", /* Background color */\r\n        \"#e0e0e0\", /* Text color */\r\n        \r\n    ];\r\n\r\n\r\n    const backgroundColor = theme === \"lightmode\" ? lightmodeValues[0] : darkmodeValues[0];\r\n    const color = theme === \"lightmode\" ? lightmodeValues[1] : darkmodeValues[1];\r\n\r\n\r\n\r\n    document.body.style.backgroundColor = backgroundColor;\r\n    document.body.style.color = color;\r\n\r\n    return (\r\n        <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    );\r\n};","import React, { useState, useContext } from 'react';\r\nimport { ThemeContext } from './ThemeProvider';\r\nimport './../styles/titlecard.css'\r\n\r\nconst ThemeSwapper: React.FC = () => {\r\n    const { theme, toggleTheme } = useContext(ThemeContext);\r\n\r\n    const [textColor, setTextColor] = useState(theme === \"lightmode\" ? \"#171717\" : \"#e0e0e0\");\r\n\r\n    const click = () => {\r\n        toggleTheme();\r\n        setTextColor(textColor === \"#171717\" ? \"#e0e0e0\" : \"#171717\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"theme\">\r\n            <button onClick={click} style={{background: \"transparent\", border: \"none\", float: \"right\", color: textColor}}>\r\n                {theme === \"lightmode\" ? \"Dark mode\" : \"Light mode\"}\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ThemeSwapper;","import React, { useState, useContext, useEffect } from 'react';\r\nimport { ThemeContext } from './ThemeProvider';\r\nimport './../styles/titlecard.css'\r\n\r\nexport default function TitleCard() {\r\n\r\n    const { theme, toggleTheme } = useContext(ThemeContext);\r\n\r\n    const [headercolor, setHeadercolor] = useState(theme === \"lightmode\" ? \"#171717\" : \"#e0e0e0\");\r\n\r\n    useEffect(() => {\r\n        setHeadercolor(theme === \"lightmode\" ? \"#171717\" : \"#e0e0e0\");\r\n    }, [theme])\r\n\r\n\r\n    const headerstyle = {\r\n        color: headercolor,\r\n    }\r\n\r\n    return (\r\n        <div className=\"title\">\r\n            <h4 style={headerstyle}>The Supreme Court's</h4>\r\n            <h1 style={headerstyle}>Super Movie DB</h1>\r\n        </div>\r\n    );\r\n}\r\n","import React,{useEffect} from 'react';\r\nimport SearchScreen from './SearchScreen';\r\nimport LoginScreen from './LoginScreen';\r\nimport ThemeSwapper from './ThemeSwapper';\r\nimport TitleCard from './TitleCard';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\n\r\nexport default function App() {\r\n  useEffect(() => {\r\n    document.title = \"Movie App\";\r\n  }, [])\r\n  \r\n  return (\r\n      <div className=\"App\">\r\n        <ThemeSwapper />\r\n        <TitleCard />\r\n        <SearchScreen />\r\n      </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport { ThemeProvider } from './components/ThemeProvider';\r\n\r\nReactDOM.render(\r\n  <ThemeProvider>\r\n    <App />\r\n  </ThemeProvider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}